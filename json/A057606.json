{"formerly":"","seq":"2,6,2,4,6,4,2,4,8,4,8,4,2,0,2,4,10,6,12,8,8,6,6,0,2,0,0,0,0,0,2,4,12,8,16,14,16,12,12,12,6,4,8,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,14,10,20,22,24,22,22,26,18,16,12,16,12,0,4,10,0,0,0,2,0,0,0,0","description":"Triangle read by rows: T(n,k) = number of binary n-tuples u having exactly k grandchildren, where a grandchild is a vector obtained by deleting any two coordinates of u (n >= 3, 1<=k<=2^(n-2)).","comments":"Row lengths = 2^(n-2), row sums = 2^n.","references":["N. J. A. Sloane, On single-deletion-correcting codes, in Codes and Designs (Columbus, OH, 2000), 273-291, Ohio State Univ. Math. Res. Inst. Publ., 10, de Gruyter, Berlin, 2002."],"links":["Reinhard Zumkeller, <a href=\"/A057606/b057606.txt\">Rows n = 3..15 of triangle, flattened</a>","N. J. A. Sloane, <a href=\"http://neilsloane.com/doc/dijen.txt\">On single-deletion-correcting codes</a>"],"example":"2,6; 2,4,6,4; 2,4,8,4,8,4,2,0; ...","prog":"(Haskell)import Data.List (group, sort, nub, inits, tails)a057606 n k = a057606_tabf !! (n-3) !! (k-1)a057606_row n = a057606_tabf !! (n-3)a057606_tabf = map g $ drop 3 $  iterate (\\xs -> (map (0 :) xs) ++ (map (1 :) xs)) [[]] where  g xss = map length $ fill0 $ group $ sort $ map (length . del2) xss    where fill0 uss = f0 uss [1 .. length xss `div` 4] where           f0 _  []        = []           f0 [] (j:js)    = [] : f0 [] js           f0 vss'@(vs:vss) (j:js)            | j == head vs = vs : f0 vss js            | otherwise    = [] : f0 vss' js  del2 = nub . (concatMap del1) . del1  del1 xs = nub $            zipWith (++) (init $ inits xs) (map tail $ init $ tails xs)-- _Reinhard Zumkeller_, Apr 30 2012","crossrefs":["Cf. A057607."],"keyword":"nonn,tabf,nice","offset":"3,1","author":"_N. J. A. Sloane_, Oct 08 2000"}